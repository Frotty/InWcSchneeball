package Child
import PhysicsEntity
import EventHandling
import Terrain
import HomingProjectile
import Entity
import Snowball
import GameConstants
import Snowbomb
import PlayerData
import Rollingball
import KillStreaks
import Snowman
import IceWall
import Iceshard
import LinkedList
import ItemHandling

public LinkedList<Child> childs = new LinkedList<Child>()


public constant real SX1 = -2340.
public constant real SY1 = 3810
public constant real SX2 = 2174
public constant real SY2 = 4000


public class Child extends PhysicsUnitEntity
	trigger t
	boolean fixPos = false
	
	construct( vec3 pos, player owner, int id)
		super(pos, CreateUnit(owner, id, pos.x, pos.y, 0), 52.)
		childs.add(this)
		restitution = .25
		friction = 0.75
		actor.registerCastEvent(Condition(function Child.onCast))
		t = CreateTrigger()
		t.registerUnitEvent(actor, EVENT_UNIT_DEATH)
		t.addAction(function Child.onDeath)
		
		
	static function onCast() returns boolean
		var id = GetSpellAbilityId()
		var data = GetTriggerUnit().getUserData() castTo Child
		var tx = GetSpellTargetX()
		var ty = GetSpellTargetY()
		var tz = getTerrainZ(tx,ty)
		let angle = angleBetweenCoordsR(data.pos.x, data.pos.y, tx, ty)
		switch id
			case 'A000'
				new Snowball(vec3(data.actor.getX(), data.actor.getY(), data.pos.z+16.), data.owner, angle )
			case 'A001'
				debugPrint("casted", 1)
				new Snowbomb(vec3(data.pos.x, data.pos.y, data.pos.z+16.), data.owner, vec3(tx, ty, tz ))
				for int i = 0 to 5
					var uit = UnitItemInSlot(data.actor, i)
					if GetItemTypeId(uit) == 'I006'
						debugPrint("MISSILE FOUND", 1)
						if GetItemCharges(uit) <= 1
							RemoveItem(uit)
						else
							SetItemCharges(uit,GetItemCharges(uit) -1)
						break
			case 'A002'
				new Rollingball(vec3(data.pos.x + Cos(angle) * 16., data.pos.y + Sin(angle) * 16., data.pos.z +16.), data.owner, angle )
				for int i = 0 to 5
					var uit = UnitItemInSlot(data.actor, i)
					if GetItemTypeId(uit) == 'I004'
						debugPrint("MISSILE FOUND", 1)
						if GetItemCharges(uit) <= 1
							RemoveItem(uit)
						else
							SetItemCharges(uit,GetItemCharges(uit) -1)
						break
			case 'A003'
				new SnowmanMissile(vec3(data.pos.x, data.pos.y, data.pos.z+40.), data.owner, vec2(tx, ty) )
				for int i = 0 to 5
					var uit = UnitItemInSlot(data.actor, i)
					if GetItemTypeId(uit) == 'I005'
						debugPrint("MISSILE FOUND", 1)
						if GetItemCharges(uit) <= 1
							RemoveItem(uit)
						else
							SetItemCharges(uit,GetItemCharges(uit) -1)
						break
			case 'A004'
				new IceMissile(vec3(data.actor.getX(), data.actor.getY(), data.pos.z+16.), data.owner, vec3(tx,ty,tz))
				for int i = 0 to 5
					var uit = UnitItemInSlot(data.actor, i)
					if GetItemTypeId(uit) == 'I003'
						debugPrint("MISSILE FOUND", 1)
						if GetItemCharges(uit) <= 1
							RemoveItem(uit)
						else
							SetItemCharges(uit,GetItemCharges(uit) -1)
						break
			case 'A008'
				new Iceshard(vec3(data.actor.getX(), data.actor.getY(), data.pos.z+16.), data.owner, angle )
				for int i = 0 to 5
					var uit = UnitItemInSlot(data.actor, i)
					if GetItemTypeId(uit) == 'I00E'
						debugPrint("MISSILE FOUND", 1)
						if GetItemCharges(uit) <= 1
							RemoveItem(uit)
						else
							SetItemCharges(uit,GetItemCharges(uit) -1)
				
		return false
		
	static function onDeath()
		var p = GetKillingUnit().getOwner()
		var p2 = GetDyingUnit().getOwner()
		adjustKills(p, p2)
		timer t = getTimer()
		t.setData(GetDyingUnit().getUserData()).start(3., function Child.revive)
		removeallspell(GetDyingUnit())
				
	static function revive()
			debugPrint("rev", 1)
			var t = GetExpiredTimer()
			Child c = t.getData() castTo Child
			
			if c.owner.getId() > 5
				ReviveHero(c.actor, SX2 + 64 * c.owner.getId(), SY2, false)
				c.setNewPos(vec3(SX2 + 64 * c.owner.getId(), SY2, 530.))
			else
				ReviveHero(c.actor, SX1 + 64 * c.owner.getId(), SY1, false)
				c.setNewPos(vec3(SX1 + 64 * c.owner.getId(), SY1, 530.))
			c.setVel(vec3(0,0,0))
			c.actor.setVertexColor(255,255,255,255)
			SetUnitPropWindow(c.actor,60)
			t.release()	

	override function update()
		pos.x = actor.getX()
		pos.y = actor.getY()
		super.update()
		
		if fixPos
			actor.setPos(pos.toVec2())
			fixPos = false
		else
			actor.setXY(pos.toVec2())
		actor.setFlyHeight(pos.z-terrainZ, 0.)
		
	override function onGround()
		super.onGround()
		if vel.lengthSquared() > 4.
			if not isTerrainWalkable(pos.x, pos.y)
				vel += getBounceVec(vel.toVec2(),getPathingNormal(pos.toVec2())).withZ(0)
				fixPos = true
		
public function getPathingNormal(vec2 pos) returns vec2
	int numberOfTests = 12
	real radius = 64
	vec2 addedVecs = vec2(0, 0)
	for int i = 1 to numberOfTests
		vec2 direction = vec2(0,0).polarOffset(i*2*bj_PI/numberOfTests, radius)
		vec2 testPoint = pos + direction
		if isTerrainWalkable(testPoint.x, testPoint.y)
			addedVecs += direction
	return addedVecs.setLength(1.) * (-1.)
	
public function getBounceVec(vec2 vel2, vec2 nor2) returns vec2
		vec3 vel3 = vel2.toVec3()
		vec3 nor3 = nor2.toVec3()
		vec3 pv3 = vel3.project(nor3)
		vec2 pv2 = pv3.toVec2()
		pv2 *= (-1.4)
		return pv2

		
		