package Child
import PhysicsEntity
import EventHandling
import Terrain
import HomingProjectile
import Entity
import Snowball
import GameConstants
import Snowbomb
import PlayerData
import Rollingball
import KillStreaks
import Snowman

public class Child extends PhysicsUnitEntity
	trigger t
	boolean fixPos = false
	
	construct( vec3 pos, player owner )
		super(pos, CreateUnit(owner, 'H001', pos.x, pos.y, 0), 48.)
		restitution = .15
		friction = 0.7
		actor.registerCastEvent(Condition(function Child.onCast))
		t = CreateTrigger()
		t.registerUnitEvent(actor, EVENT_UNIT_DEATH)
		t.addAction(function Child.onDeath)
		
	static function onCast() returns boolean
		var id = GetSpellAbilityId()
		var data = GetTriggerUnit().getUserData() castTo Child
		var tx = GetSpellTargetX()
		var ty = GetSpellTargetY()
		var tz = getTerrainZ(tx,ty)
		let angle = angleBetweenCoordsR(data.pos.x, data.pos.y, tx, ty)
		switch id
			case 'A000'
				print("casted")
				new Snowball(vec3(data.actor.getX(), data.actor.getY(), data.pos.z+16.), data.owner, angle )
			case 'A001'
				debugPrint("casted", 1)
				new Snowbomb(vec3(data.pos.x, data.pos.y, data.pos.z), data.owner, vec3(tx, ty, tz ))
			case 'A002'
<<<<<<< HEAD
				new Rollingball(vec3(data.pos.x + Cos(angle) * 16., data.pos.y + Sin(angle) * 16., data.pos.z), data.owner, angle )
=======
				new Rollingball(vec3(data.pos.x, data.pos.y, data.pos.z+40.), data.owner, angle )
			case 'A003'
				new Snowman(vec3(data.pos.x, data.pos.y, data.pos.z+40.), data.owner, angle )
>>>>>>> ca73324e9d6fd36fca842edfab529eb3853d3588
				
		return false
		
	static function onDeath()
		var p = GetKillingUnit().getOwner()
		var p2 = GetDyingUnit().getOwner()
		DisplayTimedTextToForce(GetPlayersAll(), 12., colorcode[p.getId()] + p.getName() + "|r hit " + colorcode[p2.getId()] + p2.getName() + "|r in the face with his snowball!" )
		adjustKills(p, p2)
		timer t = getTimer()
		t.setData(GetDyingUnit().getUserData()).start(3., function Child.revive)
				
	static function revive()
			debugPrint("rev", 1)
			var t = GetExpiredTimer()
			Child c = t.getData() castTo Child
			var revX = c.pos.x
			var revY = c.pos.y
			ReviveHero(c.actor, revX, revY, false)
			c.setVel(vec3(0,0,0))
			c.setNewPos(vec3(revX, revY, 530.))
			SetUnitPropWindow(c.actor,60)
			t.release()	

	override function update()
		pos.x = actor.getX()
		pos.y = actor.getY()
		super.update()
		
		if fixPos
			actor.setPos(pos.toVec2())
			fixPos = false
		else
			actor.setXY(pos.toVec2())
		actor.setFlyHeight(pos.z-terrainZ, 0.)
		
	override function onGround()
		super.onGround()
		if vel.lengthSquared() > 4.
			if not isTerrainWalkable(pos.x, pos.y)
				vel += getBounceVec(vel.toVec2(),getPathingNormal(pos.toVec2())).withZ(0)
				fixPos = true
		
public function getPathingNormal(vec2 pos) returns vec2
	int numberOfTests = 12
	real radius = 64
	vec2 addedVecs = vec2(0, 0)
	for int i = 1 to numberOfTests
		vec2 direction = vec2(0,0).polarOffset(i*2*bj_PI/numberOfTests, radius)
		vec2 testPoint = pos + direction
		if isTerrainWalkable(testPoint.x, testPoint.y)
			addedVecs += direction
	return addedVecs.setLength(1.) * (-1.)
	
public function getBounceVec(vec2 vel2, vec2 nor2) returns vec2
		vec3 vel3 = vel2.toVec3()
		vec3 nor3 = nor2.toVec3()
		vec3 pv3 = vel3.project(nor3)
		vec2 pv2 = pv3.toVec2()
		pv2 *= (-1.4)
		return pv2

		
		