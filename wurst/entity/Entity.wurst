package Entity
import LinkedListModule
import TerrainUtils
import PhysicsConstants
import Debug
import Fx
import public Event

public function unit.abortOrder() returns boolean
	if IsUnitPaused(this)
		return false
	else
		PauseUnit(this, true)
		IssueImmediateOrder(this, "stop")
		PauseUnit(this, false)
	return true

public function unit.getEntity() returns Entity
	return this.getUserData() castTo Entity
	
public function item.getEntity() returns Entity
	return this.getUserData() castTo Entity
	
public function unit.setEntity(Entity e)
	this.setUserData(e castTo int)

public abstract class Entity
	use LinkedListModule

	vec3 pos
	vec3 vel

	real radius
	real terrainZ
	protected real speedFactor = 1.
	
	player owner
	// sleeping or active?
	boolean active 		= true
	// for removing
	boolean done 		= false

	construct( vec3 pos, player owner )
		setup(pos, vec3(0,0,0), 0, owner)

	construct( vec3 pos, real radius, player owner )
		setup(pos, vec3(0,0,0), radius, owner)
		
	construct( vec3 pos, vec3 vel, player owner )
		setup(pos, vel, 0, owner)
		
	construct( vec3 pos, vec3 vel, real radius, player owner )
		setup(pos, vel, radius, owner)

	function setup(vec3 pos, vec3 vel, real radius, player owner)
		this.pos = pos
		this.vel = vel
		this.owner = owner
		this.radius = radius
		entityCount++
		printLog(Loglevel.DEBUG,"EntityCount: " + entityCount.toString())
		printLog(Loglevel.DEBUG,"UnitEntityCount: " + unitEntityCount.toString())
		
		
	function setPos(vec3 tpos)
		this.pos = tpos
		
	function addPos(vec3 pos)
		this.pos += pos

	function getPos() returns vec3
		return pos
		
	function setVel( vec3 vel )
		this.vel = vel
		active = true
	
	function addVel( vec3 vel )
		this.vel += vel
		active = true

	function getVel() returns vec3
		return vel
		
	function setTarget( vec3 tpos, real speed )
		var t = pos.distanceTo2d(tpos) / speed
		let tangle = pos.angleTo2d(tpos)
		let e = getTerrainZ(tpos.x,tpos.y)
		
		if t < 1.
			t = 1./speed
		
		let startZVelocity = ((-gravity.z * t) / 2 - pos.z/t + e/t)
		this.setVel(vec3( Cos(tangle.radians()) * speed, Sin(tangle.radians()) * speed, startZVelocity))

	function terminate()
		done = true
		
	/** This function is called every ANIMATION_PERIOD tick if the Entity is active */
	abstract function update()
	
abstract public class UnitEntity extends Entity
	unit actor
	vec2 walkVelocity
	
	construct( vec3 pos, unit actor )
		super(pos, actor.getOwner())
		this.actor = actor
		actor..setEntity(this)..addAbility(HEIGHT_ENABLER)..removeAbility(HEIGHT_ENABLER)
		
	construct( vec3 pos, real radius, unit actor )
		super(pos, radius, actor.getOwner())
		this.actor = actor
		actor..setEntity(this)..addAbility(HEIGHT_ENABLER)..removeAbility(HEIGHT_ENABLER)
		
	override function update()
		updatePos()
		
	function updatePos()
		walkVelocity = pos.toVec2()
		pos = vec3(actor.getX(), actor.getY(), pos.z)
		walkVelocity += vel - pos.toVec2()
		
	function setNewActor(unit u)
		actor.remove()
		actor = u
		actor.setEntity(this)
		
	override function setPos(vec3 tpos)
		pos = tpos
		SetUnitPosition(actor, tpos.x,tpos.y)
		actor.setFlyHeight(tpos.z - terrainZ, 0)
		
	function setXY(vec3 tpos)
		pos = tpos
		actor.setXY(tpos)
		actor.setFlyHeight(tpos.z - terrainZ, 0)

	override function getPos() returns vec3
		return pos

abstract public class FxEntity extends Entity
	protected Fx fx
	boolean silent = false
	
	construct( vec3 pos, real radius, player owner, angle xyAngle, string sfxpath )
		super(pos, radius, owner)
		fx = new Fx(pos, xyAngle, sfxpath)
		fx.setOwner(owner, true)
		
	construct( vec3 pos, real radius, player owner, angle xyAngle )
		super(pos, radius, owner)
		fx = new Fx(pos, xyAngle)
		fx.setOwner(owner, true)
	
	construct( vec3 pos, player owner, angle xyAngle )
		super(pos, 0., owner)
		fx = new Fx(pos, xyAngle)
		fx.setOwner(owner, true)
		
	override function update()
		pos += (vel*speedFactor)
		fixPos()
		
	function setFx(string sfxpath)
		fx.setFx(sfxpath)
		
	function fixPos()
		fx.setXYZ(pos)
		
	function getDummy() returns unit
		return fx.getDummy()
		
	override function setPos(vec3 tpos)
		pos = tpos
		fx.setPos(tpos.x,tpos.y)
		
	ondestroy
		if silent
			fx.hiddenDestroy()
		else
			destroy fx


	