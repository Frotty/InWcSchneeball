package PresentUnwrap
import Gamemode
import Entity
import TimedBar
import Child
import GameConstants
import ClosureTimers
import Assets
import PlayerData

constant PRESENT_ID = 'I002'
constant UNWRAP_ID = 'A007'
constant CIRCLE_ID = 'ncop'

constant PRESENTS = ['I000', 'I001', 'I00B', 'I00C', 'I00D']

public function checkUnwrap(unit u)
	for int i = 0 to 5
		var uit = UnitItemInSlot(u, i)
		if GetItemTypeId(uit) == PRESENT_ID
			uit.getEntity().terminate()
			u.addItemById(PRESENTS[GetRandomInt(1, 4)])
			break

function isChild() returns boolean
	return GetFilterUnit().getEntity() instanceof Child

function sellPresent()
	let u = GetTriggerUnit()
	let p = GetOwningPlayer(u)
	for int i = 0 to 5
		var uit = UnitItemInSlot(u, i)
		if GetItemTypeId(uit) == PRESENT_ID
			uit.getEntity().terminate()
			pData[p.getId()].presents++
			playerboard.updateValue(pData[p.getId()].gameId + 1, 3, pData[p.getId()].presents.toString())
			p.addGold(100)
			createTTEx(vec3(u.getX(), u.getY(), 20.), vec2(0, 0.05), "|cffffcc00+100|r", 10,  2., colorA(255,255,255,0), p)
			gg_unit_e002_0011..setAnimation("Spell")..queueAnimation("Walk - 2")
			gg_unit_e002_0012..setAnimation("Spell")..queueAnimation("Walk - 2")
			announcers[2].play()
			DisplayTimedTextToForce(GetPlayersAll(), 12., "|cffFFCC00>>>|r " + p.getNameColored() + "|r has returned a Present gaining |cffFFCC00+3|r Points for his team!")
			var factor = max(1, 1 + (getEnemyChildren(p).size() - getAlliedChildren(p).size()))
			if p.getId() <= 4
				humanscore += 3
				if humanscore > orcscore
					factor += ((humanscore - orcscore) div 4)
					for child in getEnemyChildren(p)
						child.actor.addXp(25 * factor, true)
						child.owner.addGold(10 * factor)
			else
				orcscore += 3
				if orcscore > humanscore
					factor += ((orcscore - humanscore) div 4)
					for child in getEnemyChildren(p)
						child.actor.addXp(25 * factor, true)
						child.owner.addGold(10 * factor)

			doAfter(2.5) ->
				checkEnd()


function startBar()
	var u = GetSpellAbilityUnit()
	var id = GetSpellAbilityId()
	if id == UNWRAP_ID
		let child = (u.getEntity() castTo Child)
		child.wrapBar = new TimedBar(child, "|", 120, 0, 7.5, COLOR_WHITE, COLOR_GOLD, u)


constant RUNES = ['rhe1', 'rman', 'rspd', 'gold']

class RuneItem extends ItemEntity

	construct(vec2 pos)
		super(createItem(RUNES[GetRandomInt(0, 3)], pos))
		flashEffect(Abilities.healingSalveTarget, pos)

	override function onPickup(UnitEntity entity)
		if not done
			let tpos = getPos()
			doAfter(GetRandomReal(25, 35)) ->
				new RuneItem(tpos.toVec2())
			terminate()


	override function onDrop(UnitEntity entity)

	override function onUse(UnitEntity entity)
		if not done
			let tpos = getPos()
			doAfter(GetRandomReal(25, 35)) ->
				new RuneItem(tpos.toVec2())
			terminate()

public function initPowerupCircles()
	gg_unit_ncop_0022..setVertexColor(color(65, 195, 195))..setScale(0.45)
	gg_unit_ncop_0023..setVertexColor(color(65, 195, 195))..setScale(0.45)

	doAfter(GetRandomReal(20, 30)) ->
		new RuneItem(gg_unit_ncop_0022.getPos())

	doAfter(GetRandomReal(20, 30)) ->
		new RuneItem(gg_unit_ncop_0023.getPos())


public function initPresentCircles()
	gg_unit_ncop_0021..setVertexColor(COLOR_GOLD)
	gg_unit_ncop_0024..setVertexColor(COLOR_GOLD)
	CreateTrigger()
	..registerUnitInRange(gg_unit_ncop_0021, 100, Filter(() -> GetFilterUnit().getEntity() instanceof Child))
	..addAction(() -> sellPresent())
	CreateTrigger()
	..registerUnitInRange(gg_unit_ncop_0024, 100, Condition(function isChild))
	..addAction(function sellPresent)

init
	EventListener.add(EVENT_PLAYER_UNIT_SPELL_CHANNEL) ->
		startBar()
