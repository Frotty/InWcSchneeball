package ItemHandling
import ItemObject
import ClosureEvents

int array items
int array spells
int array maxstack

constant int PRESENT_ID = 'I002'

public function onPickup()
	let u = GetManipulatingUnit()
	let itm = GetManipulatedItem()
	let itid = GetItemTypeId(itm)
	if itid == PRESENT_ID
		if GetItemOfTypeFromUnitBJ(u, PRESENT_ID) != itm
			int slot = 0
			for int i = 0 to 5
				if UnitItemInSlot(u,i) == itm
					slot = i 
					break
			UnitDropItemSlot(u, itm, slot)
			let data = itm.getUserData() castTo ItemObject
			data.actorItem.remove()
			data.actorItem = createItem(PRESENT_ID, data.getPos())
			data.actorItem.setUserData(data castTo int)
			createTTEx(vec3(u.getX(),u.getY(),20.), vec2(0,0.05), "|cffcccc00You can only carry one!|r", 10,  2., colorA(255,255,255,0), u.getOwner() )
		else
			DisplayTimedTextToForce(GetPlayersAll(), 12., u.getOwner().getNameColored() + " has acquired a present!")	
		return
	item foundItem = null
	int itemid = -1
	for i = 0 to 4
		if GetItemTypeId(itm) == items[i]
			itemid = i
			break
	if itemid > -1
		int charges = 1
		for i = 0 to 5
			var uit = UnitItemInSlot(u, i)
			if GetItemTypeId(uit) == GetItemTypeId(itm) and uit != itm
				charges = (GetItemCharges(uit) + GetItemCharges(itm))
				if GetItemCharges(uit) + GetItemCharges(itm) <= maxstack[itemid]
					foundItem = uit
					RemoveItem(itm)
					break
		if foundItem != null
			SetItemCharges(foundItem, charges)
		else
			u.addAbility(spells[itemid])


public function removeallspell(unit u)
	for i = 0 to 4
		u.removeAbility(spells[i])



init
	EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
		onPickup()
	// Icewall
	items[0] = 'I003'
	spells[0] = 'A004'
	maxstack[0] = 3
	// SNowbomb
	items[1] = 'I006'
	spells[1] = 'A001'
	maxstack[1] = 2
	// Rolling Ball
	items[2] = 'I004'
	spells[2] = 'A002'
	maxstack[2] = 1
	// Snowman
	items[3] = 'I005'
	spells[3] = 'A003'
	maxstack[3] = 2
	// Iceshard
	items[4] = 'I00E'
	spells[4] = 'A008'
	maxstack[4] = 3
	
