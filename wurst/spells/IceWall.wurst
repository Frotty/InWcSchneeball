package IceWall
import Projectile
import initlater Child
import FxEntity
import Collision
import initlater Snowball
import AbilityTooltipGenerator
import Iceshard
import Assets

public constant ICEWALL_SPELL_ID = compiletime(ABIL_ID_GEN.next())

constant SPEED = 18.
constant FACTOR = 2.
constant COLLOSION = 'e001'

public class IceMissile extends Projectile
	vec3 target
	var level = 1

	construct(vec3 pos, player owner, vec3 target, int level)
		super(pos, 28., owner, pos.angleTo2d(target), "Abilities\\Weapons\\WingedSerpentMissile\\WingedSerpentMissile.mdl")
		this.target = target
		this.level = level
		setTimed(4.)
		setSpeed(SPEED)

	override function update()
		super.update()
		if pos.toVec2().distanceToSq(target.toVec2()) < 64*64
			terminate()

	function onHit(Entity e)
		terminate()
		if e instanceof Child and (e castTo Child).actor.isAlive()
			let angle = pos.angleTo2d(e.getPos())
			e.addVel(angle.toVec(FACTOR).withZ(1.))


	ondestroy
		let modifier = min(3, 1 + level)
		for i = -modifier to modifier
			new Iceblock(pos.toVec2().polarOffset(xyAngle + (24. * i).asAngleDegrees(), 128. + (modifier * 12).abs()).toVec3(), owner, GetRandomReal(2.8, 3.0))

public class Iceblock extends FxEntity
	real scale
	unit collision

	construct(vec3 pos, player owner, real scale)
		super(owner, pos, 48, GetRandomReal(0,360).asAngleDegrees(),  "IceSpikeFullWrap.mdx")
		this.pos.z = pos.getTerrainZ()
		this.scale = scale
		collision = createUnit(owner, COLLOSION, pos, angle(0))
		collision.setXY(pos)
		fx.setScale(scale)
		fx.setZ(0)
		silent = true
		if owner.getId() > 4
			fx.setColor(colorA(255, 155, 155, 255))
		else
			fx.setColor(colorA(155, 155, 255, 255))
		registerCollidable(this, other -> onHit(other))

	override function slowUpdate()
		super.slowUpdate()
		if idleSeconds > 19.
			terminate()

	override function update()
		super.update()

	function onHit(Entity other)
		if other.owner.isEnemyOf(owner) and other instanceof Snowball or other instanceof Iceshard
			other.terminate()
		scale -= 0.25
		fx.setScale(scale)
		radius -= 2
		radius2 = radius * radius
		if scale <= 1.
			terminate()

	ondestroy
		collision.remove()
		flashEffect(Abilities.frostNovaTarget, pos)
		removeCollidable(this)

@compiletime function getObjs()
	let tgen = new AbilityTooltipGenerator("Protect key positions with strategic ice walls.")
	new ChannelAbilityPreset(ICEWALL_SPELL_ID, 4, true, tgen)
	..presetButtonPosNormal(3, 0)
	..presetTargetTypes(Targettype.POINT)
	..tooltipStartListen()
	..presetHotkey("T")
	..setName("Ice wall")
	..presetIcon("BTNIceField")
	..presetCooldown(lvl -> 13.75 - (lvl / 4))
	..presetManaCost(lvl -> 4 - (lvl / 3).toInt())
	..presetCastRange(lvl -> 850. + 100. * lvl)
	..tooltipStopListen()
